(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{493:function(a,t,s){"use strict";s.r(t);var v=s(4),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"git教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git教程"}},[a._v("#")]),a._v(" git教程")]),a._v(" "),s("h2",{attrs:{id:"版本控制工具具备的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本控制工具具备的功能"}},[a._v("#")]),a._v(" 版本控制工具具备的功能")]),a._v(" "),s("ul",[s("li",[a._v("协同修改")]),a._v(" "),s("li",[a._v("数据备份")]),a._v(" "),s("li",[a._v("版本管理：在保存每一版的文件信息时，要做到不保存重复数据，以节约空间，提高效率。SVN采用的是增量式管理，Git采用的是文件系统快照的方式。")]),a._v(" "),s("li",[a._v("权限控制\n"),s("ul",[s("li",[a._v("对团队中参与开发的人员进行权限控制。")]),a._v(" "),s("li",[a._v("对团队外开发者贡献的代码进行审核——Git独有。")])])]),a._v(" "),s("li",[a._v("历史记录\n"),s("ul",[s("li",[a._v("查看修改人、修改时间、修改内容、日志信息。")]),a._v(" "),s("li",[a._v("将本地文件恢复到某一历史状态。")])])]),a._v(" "),s("li",[a._v("分支管理：允许开发团队在工作过程中多条生产线同时推进，提高效率")])]),a._v(" "),s("h2",{attrs:{id:"版本控制工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本控制工具"}},[a._v("#")]),a._v(" 版本控制工具")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("集中式版本控制工具：")]),a._v(" "),s("ul",[s("li",[a._v("CVS")]),a._v(" "),s("li",[a._v("SVN")]),a._v(" "),s("li",[a._v("VSS")]),a._v(" "),s("li",[a._v("...")])]),a._v(" "),s("blockquote",[s("p",[a._v("将文件和版本信息存储在服务器中，开发者相当于客户端，与服务器进行交互来实现版本控制。在本地没有完整的版本数据，若服务器损坏或宕机，则历史数据就丢失了。")])])]),a._v(" "),s("li",[s("p",[a._v("分布式版本控制工具：")]),a._v(" "),s("ul",[s("li",[a._v("Git")]),a._v(" "),s("li",[a._v("Mervurial")]),a._v(" "),s("li",[a._v("Bazzaar")]),a._v(" "),s("li",[a._v("Darcs")]),a._v(" "),s("li",[a._v("...")])]),a._v(" "),s("blockquote",[s("p",[a._v("在本地有完整的历史数据。每个客户端就相当于一个服务器。")])])])]),a._v(" "),s("h2",{attrs:{id:"git的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的优势"}},[a._v("#")]),a._v(" Git的优势")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("大部分操作在本地完成，不需要联网")])]),a._v(" "),s("li",[s("p",[a._v("完整性保证")]),a._v(" "),s("blockquote",[s("p",[a._v("每次提交时进行哈希，只要哈希值不变则历史数据不变")])])]),a._v(" "),s("li",[s("p",[a._v("尽可能添加数据而不是删除或修改数据")]),a._v(" "),s("blockquote",[s("p",[a._v("保证了版本的可回溯性")])])]),a._v(" "),s("li",[s("p",[a._v("分支操作非常快捷流畅")])]),a._v(" "),s("li",[s("p",[a._v("与Linux命令全面兼容")])])]),a._v(" "),s("h2",{attrs:{id:"git结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git结构"}},[a._v("#")]),a._v(" Git结构")]),a._v(" "),s("ul",[s("li",[a._v("工作区：写代码的地方")]),a._v(" "),s("li",[a._v("暂存区：临时存储的地方")]),a._v(" "),s("li",[a._v("本地库：历史版本")])]),a._v(" "),s("p",[a._v("工作区 --\x3e git add --\x3e 暂存区 --\x3e git commit --\x3e 本地库")]),a._v(" "),s("h2",{attrs:{id:"git和代码托管中心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git和代码托管中心"}},[a._v("#")]),a._v(" Git和代码托管中心")]),a._v(" "),s("ul",[s("li",[a._v("局域网环境下\n"),s("ul",[s("li",[a._v("GitLab服务器")])])]),a._v(" "),s("li",[a._v("外网环境下\n"),s("ul",[s("li",[a._v("GitHub")]),a._v(" "),s("li",[a._v("码云")])])])]),a._v(" "),s("h2",{attrs:{id:"本地库与远程库的交互方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地库与远程库的交互方式"}},[a._v("#")]),a._v(" 本地库与远程库的交互方式")]),a._v(" "),s("p",[a._v("用户1：本地库 --\x3e push --\x3e 远程库")]),a._v(" "),s("p",[a._v("用户2：远程库 --\x3e clone --\x3e 本地库 --\x3e 加入团队后，才能push到远程库")]),a._v(" "),s("p",[a._v("用户1：远程库 --\x3e pull --\x3e 本地库")]),a._v(" "),s("p",[s("img",{attrs:{src:"/img/git_02_img.png",alt:"流程图"}})]),a._v(" "),s("h2",{attrs:{id:"设置签名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置签名"}},[a._v("#")]),a._v(" 设置签名")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("形式")]),a._v(" "),s("p",[a._v("​\t用户名：tom")]),a._v(" "),s("p",[a._v("​\tEmail地址：goodMorning@qq.com")])]),a._v(" "),s("li",[s("p",[a._v("作用：区分不同开发人员的身份")])]),a._v(" "),s("li",[s("p",[a._v("辨析：这里设置的签名和登录远程库的账号密码没有关系")])]),a._v(" "),s("li",[s("p",[a._v("命令：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("// "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(".项目级别/仓库级别\n// 仅在当前本地库范围内有效\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config user.name 用户名\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config user.email 邮箱\n\n// "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(".系统用户级别\n// 登录当前操作系统的用户范围有效\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global user.name 用户名\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global user.email 邮箱\n")])])]),s("blockquote",[s("p",[a._v("就近原则：项目级别的优先于系统用户级别，即两种签名都存在时，采用项目级别的签名。")]),a._v(" "),s("p",[a._v("不允许二者都没有的情况。")])])])]),a._v(" "),s("h2",{attrs:{id:"添加提交以及查看状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加提交以及查看状态"}},[a._v("#")]),a._v(" 添加提交以及查看状态")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("// 查看暂存区状态\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" status \n\n// 添加到暂存区\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" 文件名\n\n// 从暂存区移除\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" --cached 文件名\n\n// 从暂存区提交到本地库\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"提交注释"')]),a._v(" 文件名\n")])])]),s("h2",{attrs:{id:"版本穿梭"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本穿梭"}},[a._v("#")]),a._v(" 版本穿梭")]),a._v(" "),s("h3",{attrs:{id:"一、查看历史记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、查看历史记录"}},[a._v("#")]),a._v(" 一、查看历史记录")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("// 查看日志\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log\n\n//  每条日志只显示一行\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("oneline\n\n// 相较于 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("pretty")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("oneline 缩短了哈希值\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log --oneline\n\n// 相较于参数为 oneline 显示了移动到当前版本需要多少步 \n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reflog \n")])])]),s("h3",{attrs:{id:"二、前进后退版本操作的本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、前进后退版本操作的本质"}},[a._v("#")]),a._v(" 二、前进后退版本操作的本质")]),a._v(" "),s("p",[a._v("使HEAD指针指向不同的版本位置，以达到版本的控制。")]),a._v(" "),s("h3",{attrs:{id:"三、基于索引值的前进后退版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、基于索引值的前进后退版本"}},[a._v("#")]),a._v(" 三、基于索引值的前进后退版本")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset --hard 哈希索引值\n\n// 例：移动到索引值为 9a9ebe0 的版本\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset --hard 9a9ebe0\n")])])]),s("h3",{attrs:{id:"四、前进后退版本的其他方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、前进后退版本的其他方式"}},[a._v("#")]),a._v(" 四、前进后退版本的其他方式")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("使用^")]),a._v(" "),s("p",[s("strong",[a._v("注：^只能往后退")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("// 往回退一个版本\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset --hard HEAD^\n\n// 往回退三个版本\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset --hard HEAD^^^\n")])])])]),a._v(" "),s("li",[s("p",[a._v("使用~")]),a._v(" "),s("p",[s("strong",[a._v("注：~与^相同，也只能后退，只是将后退多个版本需要输多个^改为了输入~加上需要回退的版本步数")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("// 往回退三个版本\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset --hard HEAD~3\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"五、hard、soft、mixed参数对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、hard、soft、mixed参数对比"}},[a._v("#")]),a._v(" 五、hard、soft、mixed参数对比")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("// 查看reset文档\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("help")]),a._v(" reset\n")])])]),s("ul",[s("li",[a._v("--hard参数\n"),s("ul",[s("li",[a._v("在本地库移动HEAD指针")]),a._v(" "),s("li",[a._v("重置暂存区")]),a._v(" "),s("li",[a._v("重置工作区")])])]),a._v(" "),s("li",[a._v("--soft参数\n"),s("ul",[s("li",[a._v("仅仅在本地库移动HEAD指针")])])]),a._v(" "),s("li",[a._v("--mixed参数\n"),s("ul",[s("li",[a._v("在本地库移动HEAD指针")]),a._v(" "),s("li",[a._v("重置暂存区")])])])]),a._v(" "),s("h3",{attrs:{id:"六、永久删除文件后找回"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、永久删除文件后找回"}},[a._v("#")]),a._v(" 六、永久删除文件后找回")]),a._v(" "),s("p",[a._v("将版本回退到未删除的版本即可。")]),a._v(" "),s("h3",{attrs:{id:"七、将添加到暂存区的删除文件找回"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、将添加到暂存区的删除文件找回"}},[a._v("#")]),a._v(" 七、将添加到暂存区的删除文件找回")]),a._v(" "),s("p",[a._v("当我们将删除信息提交到暂存区，但尚未提交到本地库时，可以使用以下命令找回文件：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" resert --hard HEAD\n")])])]),s("p",[a._v("因为此时HEAD指向的版本中并未记录删除文件的信息。")]),a._v(" "),s("h2",{attrs:{id:"比较文件差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较文件差异"}},[a._v("#")]),a._v(" 比较文件差异")]),a._v(" "),s("ul",[s("li",[a._v("git diff 【文件名】\n"),s("ul",[s("li",[a._v("将工作区中的文件与暂存区进行比较")])])]),a._v(" "),s("li",[a._v("git diff 【本地库中历史版本】【文件名】\n"),s("ul",[s("li",[a._v("将工作区中的文件和本地库历史记录比较")])])]),a._v(" "),s("li",[a._v("git diff （【本地库中历史版本】）\n"),s("ul",[s("li",[a._v("比较暂存区/工作区中的所有文件")])])])]),a._v(" "),s("h2",{attrs:{id:"分支操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[a._v("#")]),a._v(" 分支操作")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("查看分支信息")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch -v\n")])])])]),a._v(" "),s("li",[s("p",[a._v("创建分支")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch hot_fix\n")])])])]),a._v(" "),s("li",[s("p",[a._v("切换分支")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout 【分支名】\n\n// 例：切换到hot_fix分支\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout hot_fix\n")])])])]),a._v(" "),s("li",[s("p",[a._v("合并分支")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("切换到接收修改的分支上（被合并，增加新内容）")])]),a._v(" "),s("li",[s("p",[a._v("执行 merge 命令")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge 【分支名】\n\n// 例：将hot_fix中的内容合并到当前分支\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge hot_fix\n")])])])])])]),a._v(" "),s("li",[s("p",[a._v("解决冲突")]),a._v(" "),s("p",[a._v("产生冲突的原因：当合并的两个分支修改了同一个文件的同一个位置时，并且修改的内容不一致，就会产生冲突。")]),a._v(" "),s("ol",[s("li",[a._v("编辑文件，删除特殊符号")]),a._v(" "),s("li",[a._v("把文件修改到满意的程度，保存退出")]),a._v(" "),s("li",[a._v("git add 【文件名】")]),a._v(" "),s("li",[a._v('git commit -m "日志信息"（此时commit后不能加文件名）')])])])]),a._v(" "),s("h2",{attrs:{id:"git基本原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git基本原理"}},[a._v("#")]),a._v(" Git基本原理")]),a._v(" "),s("h3",{attrs:{id:"哈希算法简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希算法简介"}},[a._v("#")]),a._v(" 哈希算法简介")]),a._v(" "),s("p",[a._v("哈希特点：")]),a._v(" "),s("ol",[s("li",[a._v("不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定")]),a._v(" "),s("li",[a._v("哈希算法确定，输入数据确定，输出的数据能够保证不变")]),a._v(" "),s("li",[a._v("哈希算法确定，输入数据与变化，输出数据一定变化")]),a._v(" "),s("li",[a._v("哈希算法不可逆")])]),a._v(" "),s("p",[a._v("Git底层采用的时SHA-1算法。")]),a._v(" "),s("h2",{attrs:{id:"在本地创建远程库地址别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在本地创建远程库地址别名"}},[a._v("#")]),a._v(" 在本地创建远程库地址别名")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" 远程库别名 远程库地址\n\n// 例：为地址为https://github.com/hello.git的远程库在本地创建名为origin的别名\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" origin https://github.com/hello.git\n\n// 查看别名信息\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote -v\n")])])]),s("h2",{attrs:{id:"推送操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推送操作"}},[a._v("#")]),a._v(" 推送操作")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push origin master\n")])])]),s("h2",{attrs:{id:"远程仓库的拉取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的拉取"}},[a._v("#")]),a._v(" 远程仓库的拉取")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("fetch操作只是将远程仓库的内容下载到本地，并没有改本地工作区的文件。")]),a._v(" "),s("blockquote",[s("p",[a._v("查看下载下来的文件需将分支切换到origin/master后在进行查看")])])]),a._v(" "),s("li",[s("p",[a._v("pull操作等于fetch+merge")])])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" fetch 【远程库地址别名】 【远程分支名】\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge 【远程库地址别名/远程分支名】\n")])])])])}),[],!1,null,null,null);t.default=_.exports}}]);